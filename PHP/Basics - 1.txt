1. phpversion();

2. PHP Case Sensitivity
	In PHP, keywords (e.g. if, else, while, echo, etc.), classes, functions, and user-defined functions are not case-sensitive.

3. Note: However; all variable names are case-sensitive!

  This is because $color, $COLOR, and $coLOR are treated as three different variables:

4.  // This is a single-line comment

# This is also a single-line comment

/* This is a
multi-line comment 

5. The multi-line comment syntax can also be used to prevent execution of parts inside a code-line:

$x = 5 /* + 15 */ + 5;
echo $x;

6. Variables are "containers" for storing information.

7. Rules for PHP variables:

A variable starts with the $ sign, followed by the name of the variable
A variable name must start with a letter or the underscore character
A variable name cannot start with a number
A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )
Variable names are case-sensitive ($age and $AGE are two different variables)

8. PHP is a Loosely Typed Language

9. PHP supports the following data types:

String
Integer
Float (floating point numbers - also called double)
Boolean
Array
Object
NULL
Resource

10. The var_dump() function returns the data type and the value:

11. Assign Multiple Values

$x = $y = $z = "Fruit";

12. PHP Variables Scope

The scope of a variable is the part of the script where the variable can be referenced/used.

PHP has three different variable scopes:

local
global
static

13. Global and Local Scope
A variable declared outside a function has a GLOBAL SCOPE and can only be accessed outside a function:

$x = 5; // global scope

function myTest() {
  // using x inside this function will generate an error
  echo "<p>Variable x inside function is: $x</p>";
}
myTest();

echo "<p>Variable x outside function is: $x</p>";

14.  A variable declared within a function has a LOCAL SCOPE and can only be accessed within that function:

function myTest() {
  $x = 5; // local scope
  echo "<p>Variable x inside function is: $x</p>";
}
myTest();

// using x outside the function will generate an error
echo "<p>Variable x outside function is: $x</p>";

15. You can have local variables with the same name in different functions, because local variables are only recognized by the function in which they are declared.

16. PHP The global Keyword
The global keyword is used to access a global variable from within a function.

To do this, use the global keyword before the variables (inside the function):

$x = 5;
$y = 10;

function myTest() {
  global $x, $y;
  $y = $x + $y;
}

myTest();
echo $y; // outputs 15

17. PHP also stores all global variables in an array called $GLOBALS[index]. The index holds the name of the variable. This array is also accessible from within functions and can be used to update global variables directly.

The example above can be rewritten like this:

$x = 5;
$y = 10;

function myTest() {
  $GLOBALS['y'] = $GLOBALS['x'] + $GLOBALS['y'];
}

myTest();
echo $y; // outputs 15

18. PHP The static Keyword
Normally, when a function is completed/executed, all of its variables are deleted. However, sometimes we want a local variable NOT to be deleted. We need it for a further job.

To do this, use the static keyword when you first declare the variable:

Example
function myTest() {
  static $x = 0;
  echo $x;
  $x++;
}

myTest();
myTest();
myTest();


Then, each time the function is called, that variable will still have the information it contained from the last time the function was called.

Note: The variable is still local to the function.







